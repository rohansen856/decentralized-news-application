# Nginx Load Balancer Configuration for Flask and FastAPI Backends

# Main context
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Gzip Settings
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;

    # Upstream backend servers
    upstream flask_backend {
        least_conn;
        server flask_app:5000 max_fails=3 fail_timeout=30s;
        # Add more Flask instances for scaling
        # server flask_app_2:5000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream fastapi_backend {
        least_conn;
        server fastapi_app:8000 max_fails=3 fail_timeout=30s;
        # Add more FastAPI instances for scaling
        # server fastapi_app_2:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Health check endpoint
    server {
        listen 8080;
        server_name localhost;
        
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

    # Main load balancer server
    server {
        listen 80;
        server_name localhost;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        # Client body size limit
        client_max_body_size 10M;

        # Timeout settings
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
        proxy_http_version 1.1;

        # Load balancing strategy: Round-robin between Flask and FastAPI
        # Authentication endpoints - route to Flask (stateful sessions)
        location ~ ^/api/v1/auth {
            limit_req zone=auth burst=10 nodelay;
            proxy_pass http://flask_backend;
            
            # Sticky sessions for auth if needed
            # ip_hash;
        }

        # User management - route to Flask
        location ~ ^/api/v1/users {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://flask_backend;
        }

        # Articles - route to FastAPI (better async performance)
        location ~ ^/api/v1/articles {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://fastapi_backend;
        }

        # Interactions - route to FastAPI
        location ~ ^/api/v1/interactions {
            limit_req zone=api burst=30 nodelay;
            proxy_pass http://fastapi_backend;
        }

        # Recommendations - route to FastAPI (ML-heavy operations)
        location ~ ^/api/v1/recommendations {
            limit_req zone=api burst=15 nodelay;
            proxy_pass http://fastapi_backend;
            
            # Longer timeout for ML operations
            proxy_read_timeout 120s;
        }

        # Search - route to FastAPI (database-heavy operations)
        location ~ ^/api/v1/search {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://fastapi_backend;
        }

        # Analytics - route to Flask
        location ~ ^/api/v1/analytics {
            limit_req zone=api burst=10 nodelay;
            proxy_pass http://flask_backend;
        }

        # Health checks - both backends
        location ~ ^/api/v1/health {
            access_log off;
            # Round-robin between both backends for health checks
            if ($request_uri ~ "flask") {
                proxy_pass http://flask_backend;
            }
            if ($request_uri ~ "fastapi") {
                proxy_pass http://fastapi_backend;
            }
            # Default to Flask for general health
            proxy_pass http://flask_backend;
        }

        # Default fallback - round robin between both
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            # Simple load balancing between Flask and FastAPI
            set $backend_pool flask_backend;
            if ($request_id ~ [02468]) {
                set $backend_pool fastapi_backend;
            }
            proxy_pass http://$backend_pool;
        }

        # Static files or frontend (if any)
        location / {
            try_files $uri $uri/ @fallback;
        }

        location @fallback {
            return 404 '{"error": "Endpoint not found", "message": "Please check the API documentation"}';
            add_header Content-Type application/json;
        }

        # Error pages
        error_page 404 /404.json;
        error_page 500 502 503 504 /50x.json;

        location = /404.json {
            internal;
            return 404 '{"error": "Not Found", "status": 404}';
            add_header Content-Type application/json;
        }

        location = /50x.json {
            internal;
            return 500 '{"error": "Internal Server Error", "status": 500}';
            add_header Content-Type application/json;
        }
    }

    # Optional HTTPS configuration (uncomment and configure certificates)
    # server {
    #     listen 443 ssl http2;
    #     server_name your-domain.com;
    #     
    #     ssl_certificate /path/to/certificate.crt;
    #     ssl_certificate_key /path/to/private.key;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #     
    #     # Include the same location blocks as above
    # }
}